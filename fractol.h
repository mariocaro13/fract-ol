/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   fractol.h                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mcaro-ro <mcaro-ro@student.42madrid.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/19 06:58:17 by mcaro-ro          #+#    #+#             */
/*   Updated: 2024/11/15 16:40:59 by mcaro-ro         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef FRACTOL_H
# define FRACTOL_H

# include "minilibx-linux/mlx.h"
# include <X11/keysym.h>
# include <stdlib.h>

# define MALLOC_ERROR 1

# define WIDTH 800
# define HEIGHT 800

# define MAX_ITERATIONS 1000

# define RED 0xFF0000
# define GREEN 0x00FF00
# define BLUE 0x0000FF
# define BLACK 0x000000
# define WHITE 0xFFFFFF

# define COMPLEX_MIN -2.0
# define COMPLEX_MAX 2.0

typedef struct s_mlx_data
{
	void	*connection;
	void	*window;
}			t_mlx_data;

typedef struct s_img_data
{
	void	*img;
	char	*addr;
	int		bits_per_pixel;
	int		line_length;
	int		endian;
}			t_img_data;

void		ft_mlx_clean(void *mlx_connection, void *mlx_window);
int			ft_mlx_init(t_mlx_data *mlx);
int			ft_mlx_close_window(int keysym, t_mlx_data *mlx);

void		ft_mlx_pixel_put(t_img_data *img, int offset, int color);

int			ft_offset(int x, int y, int line_length, int bits_per_pixel);

double		ft_convert_to_complex(int point, double size);

int			mandelbrot(double complex_real, double complex_imaginary);

/** * draw_mandelbrot - Draws the Mandelbrot set on the given image
	* @img: Pointer to the image data structure
	* 
	* Description:
	* 	This function generates and draws the Mandelbrot set on an image.
	* 	Iterates each pixel in the image, converts the pixel coordinates to
	* 	the corresponding complex number coordinates, computes the Mandelbrot
	* 	iterations, and sets the pixel color based on the number of iterations. 
	*
	* 	The Mandelbrot set is generated by the mandelbrot() function.
	* 	Pixels belonging to Mandelbrot are colored black, 
	*	while others are colored with a gradient from white to black, 
	*	depending on the number of iterations.
	* 
	* Helper functions:
	*	- mandelbrot(double cr, double ci): 
	*		Computes the Mandelbrot iterations for the complex number (cr, ci). 
	*
	*	- ft_convert_to_complex(int point, double size):
	*		Converts pixel coordinates to complex number coordinates. 
	*
	*	- ft_mlx_pixel_put(t_img_data *img, int offset, int color):
	*		Sets the color of a pixel in the image.
	*
	*	- ft_get_offset(int x, int y, int line_length, int bits_per_pixel):
	*		Computes the memory offset of the pixel in the image data.
	* 
	* Constants:
	*	- WIDTH: The width of the image.
	*	- HEIGHT: The height of the image.
	*	- BLACK: The color used for points in the Mandelbrot set.
	*	- WHITE: The base color used for the gradient (white). 
	*
	* Example usage: 
	* 	t_img_data img; 
	* 	// Initialize img, create window, etc.
	* 	draw_mandelbrot(&img); 
*/
void		draw_mandelbrot(t_img_data *img);

#endif