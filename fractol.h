/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   fractol.h                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mcaro-ro <mcaro-ro@student.42madrid.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/19 06:58:17 by mcaro-ro          #+#    #+#             */
/*   Updated: 2024/11/18 19:31:25 by mcaro-ro         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef FRACTOL_H
# define FRACTOL_H

/** INCLUDES */
# include "minilibx-linux/mlx.h"
# include <X11/keysym.h>
# include <math.h>
# include <stdio.h> // TODO debugging
# include <stdlib.h>
# include <unistd.h> // write

/** WINDOW */
# define WIDTH 1200
# define HEIGHT 1000

/** LOGIC */
# define NUM_OF_ITERATIONS 42
# define ESCAPE_VALUE 4
# define COMPLEX_MIN -2.0
# define COMPLEX_MAX 2.0

/** ERRORS DEFINITIONS */
# define MALLOC_ERROR 1
# define ERROR_MESSAGE "Usage: ./fractol [mandelbrot | julia <real> <i>]\n"

/** COLORS */
# define RED 0xFF0000
# define GREEN 0x00FF00
# define BLUE 0x0000FF
# define BLACK 0x000000
# define WHITE 0xFFFFFF

/** COMPLEX NUMBER */
typedef struct s_complex
{
	double		r;
	double		i;
}				t_complex;

/**
 * IMAGE
 * **/
typedef struct s_img_data
{
	void		*ptr;
	char		*pixels_ptr;
	int			bits_per_pixel;
	int			line_length;
	int			endian;
}				t_img_data;

/**
 * FRACTAL
 *  ~ MLX
 *	~ Image
 *	~ Hooks
 **/
typedef struct s_fractal
{
	char		*name;
	void		*mlx_connection;
	void		*mlx_window;
	t_img_data	img;
}				t_fractal;

/** STRINGS UTILS */
int				ft_strncmp(const char *s1, const char *s2, size_t n);

void			ft_putstr_fd(char *s, int fd);

/** MINILIBX-LINUX UTILS */
void			ft_mlx_clean(void *mlx_connection, void *mlx_window);
int				ft_mlx_handle_key(int keysym, t_fractal *mlx);

void			ft_mlx_pixel_put(int x, int y, t_img_data *img, int color);

/** MATH UTILS */
t_complex		ft_sum_complex(t_complex z1, t_complex z2);

t_complex		ft_square_complex(t_complex z);

int				ft_hypotenuse(double x, double y);

int				ft_offset(int x, int y, int line_length, int bits_per_pixel);

double			ft_map(int unscaled, double new_min, double new_max,
					double old_max);

/** FRACTAL */
int				ft_fractal_init(t_fractal *mlx);

void			ft_fractal_render(t_fractal *fractal);

/** MANDELBROT */

/** mandelbrot - Computes the number of iterations for the Mandelbrot set
 * @complex_r: The real part of the complex number c
 * @complex_i: The imaginary part of the complex number c
 *
 * Description:
 *	This function calculates the number of iterations required for a given
 *	complex number (c) to determine if it belongs to the Mandelbrot set.
 *
 * 	It starts with z = 0 and iteratively computes z = z^2 + c:
 *		- z is a complex number represented by (z_r, z_i).
 *
 *	Its iterate until the magnitude of z exceeds the escape diameter:
 *		- (|z|^2 > ESCAPE_DIAMETER)
 *	or the maximum number of iterations (MAX_ITERATIONS) is reached.
 *
 * Example usage:
 *	int iter = mandelbrot(0.3, 0.3);
 *	if (iter == MAX_ITERATIONS)
 *	{
 * 	// The point is within the Mandelbrot set
 *	}
 */
void			mandelbrot(int x, int y, t_fractal *fractal);

/** draw_mandelbrot - Draws the Mandelbrot set on the given image
		* @img: Pointer to the image data structure
		*
		* Description:
		* 	This function generates and draws the Mandelbrot set on an image.
		* 	Iterates each pixel in the image, converts the pixel coordinates to
		* 	the corresponding complex number coordinates,
				computes the Mandelbrot
		* 	iterations,
				and sets the pixel color based on the number of iterations.
		*
		* 	The Mandelbrot set is generated by the mandelbrot() function.
		* 	Pixels belonging to Mandelbrot are colored black,
		*	while others are colored with a gradient from white to black,
		*	depending on the number of iterations.
		*
		* Helper functions:
		*	- mandelbrot(double cr, double ci):
		*		Computes the Mandelbrot iterations for the complex number (cr,
					ci).
		*
		*	- ft_convert_to_complex(int point, double size):
		*		Converts pixel coordinates to complex number coordinates.
		*
		*	- ft_mlx_pixel_put(t_img_data *img, int offset, int color):
		*		Sets the color of a pixel in the image.
		*
		*	- ft_get_offset(int x, int y, int line_length, int bits_per_pixel):
		*		Computes the memory offset of the pixel in the image data.
		*
		* Constants:
		*	- WIDTH: The width of the image.
		*	- HEIGHT: The height of the image.
		*	- BLACK: The color used for points in the Mandelbrot set.
		*	- WHITE: The base color used for the gradient (white).
		*
		* Example usage:
		* 	t_img_data img;
		* 	// Initialize img, create window, etc.
		* 	draw_mandelbrot(&img);
		*/
void			draw_mandelbrot(t_fractal *fractal);

#endif